<?php	class Config	{		private $services;		private $actions;		private $actionPackages;		private $db;		private $pathApp;		private $pathView;		private $appName;				public function Config()		{			$key = $_SESSION['key'];			ob_start();			include APP_ROOT . '/config/context.php';			$xmlData = ob_get_contents();			ob_end_clean();			$xml = simplexml_load_string($xmlData);			$this->appName = strval(utf8_decode($xml->appname));			$this->db = array();			$this->db['url'] = '' . $xml->db->url->attributes();			$this->db['username'] = '' . $xml->db->username->attributes();			$this->db['password'] = '' . $xml->db->password->attributes();			$this->services = array();			foreach ($xml->service as $service)				$this->services['' . $service['id']] = '' . $service['class'];			$this->actions = array();			foreach ($xml->action as $action)			{				$this->actions['' . $action['id']]['class'] = '' . $action['class'];				$this->actions['' . $action['id']]['services'] = array();				foreach ($action->children() as $service)					$this->actions['' . $action['id']]['services'][] = '' . $service['ref'];			}			ob_start();			if ($_SESSION['navegador'] == 'movil')				include APP_ROOT . '/config/packages_movil.php';			else				include APP_ROOT . '/config/packages.php';			$xmlData = ob_get_contents();			ob_end_clean();			$xml = simplexml_load_string($xmlData);			$this->actionPackages = array();			foreach ($xml->package as $package)				foreach ($package as $action)				{					$atributos = $action->attributes();					$this->actionPackages['' . $atributos['name']] = array();					$this->actionPackages['' . $atributos['name']]['method'] = '' . $atributos['method'];					$this->actionPackages['' . $atributos['name']]['class'] = '' . $atributos['class'];					$this->actionPackages['' . $atributos['name']]['results'] = array();					foreach ($action as $result)					{						$atributos2 = $result->attributes();						$this->actionPackages['' . $atributos['name']]['results']['' . $atributos2['name']] = '' 								. $result[0];					}				}			$pathInfo = pathinfo($_SERVER['SCRIPT_NAME']);			if ($pathInfo['dirname'] == '/')				$this->pathApp = '';			else				$this->pathApp = $pathInfo['dirname'];			$this->pathView = $_SERVER['DOCUMENT_ROOT'] . $this->pathApp . '/view';		}				public function db()		{			return $this->db;		}				public function service($service)		{			if (isset($this->services[$service]))				return $this->services[$service];			return null;		}				public function action($action)		{			if (isset($this->actions[$action]))				return $this->actions[$action];			return null;		}				public function actionPackage($actionPackage)		{			if (isset($this->actionPackages[$actionPackage]))				return $this->actionPackages[$actionPackage];			return null;		}				public function pathApp()		{			return $this->pathApp;		}				public function pathView()		{			return $this->pathView;		}				public static function pathApp()		{			$pathInfo = pathinfo($_SERVER['SCRIPT_NAME']);			return $pathInfo['dirname'];		}				public static function rootApp()		{			$pathInfo = pathinfo($_SERVER['SCRIPT_NAME']);			return $_SERVER['DOCUMENT_ROOT'] . $pathInfo['dirname'];		}				public static function hostApp()		{			return 'http://' . $_SERVER['HTTP_HOST'];		}				public function appName()		{			return $this->appName;		}	}